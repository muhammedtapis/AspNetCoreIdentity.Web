
@{
    ViewData["Title"] = "ForgetPassword";
}

@model ForgetPasswordViewModel

@section Scripts
{
    @await Html.PartialAsync("_ValidationScriptsPartial") <!-- burada validation kullandığımız için bunu eklememiz gerek.-->
    <!-- validation kütüphanesini buraya da ekledik client-side validation yapcaz.->
     <!-- bu cshtml dosyası ana klasördeki viewin altındaki shared klasöründe biz o validation kütüphanelerine ihtiyaç duyuyoruz-->
    <!-- signup sayfasında da validation kullancağımız için ekliyoruz buraya.-->
}

<div class="row">

    <div class="col-md-4 offset-md-4">

        @if (TempData["SuccessMessage"] != null) //eğer ki ViewBag.SuccessMessage boş değilse yada tempdata
        {
            <div class="alert alert-success" role="alert">
                @TempData["SuccessMessage"]
            </div>
        }

        <div class="alert alert-info">Şifre yenileme linki, e-posta adresinize gönderilecektir.</div>

        <div asp-validation-summary=ModelOnly class="alert alert-danger" role="alert">
            <!-- Model ile ilgili hatalar mesela aynı kullanıcı adından var ise ModelState den gelen hatalar.-->

        </div>
        <form asp-controller="Home" asp-action="ForgetPassword" asp-route-returnurl="@Context.Request.Query["returnUrl"]" method="post">
            <!-- bu formun methodun tipi nereye gideceği vs belirtmen gerekiyor.-->
            <div class="mb-3">
                <!-- sistem üye girişe yönlendirdikten sonra giriş yapınca döneceğimiz return url bu returnUrl [HttpPost] SignIn methodunun parametresiyle aynı-->
                <label for="Email" class="form-label" asp-for="Email"></label>
                <input class="form-control" asp-for="Email">
                <span class="text-danger" asp-validation-for="Email"></span>
            </div>
            <button type="submit" class="btn btn-primary">Gönder</button>
        </form>


    </div>
</div>

